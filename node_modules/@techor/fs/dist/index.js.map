{
  "version": 3,
  "sources": ["../src/index.ts", "../src/read-file-sync.ts", "../src/read-file-as-normalized-str-sync.ts", "../src/read-json-file-sync.ts", "../src/write-file-sync.ts", "../src/write-json-file-sync.ts"],
  "sourcesContent": ["export { default as readFileAsNormalizedStrSync } from './read-file-as-normalized-str-sync'\nexport { default as readFileSync } from './read-file-sync'\nexport { default as readJSONFileSync } from './read-json-file-sync'\nexport { default as writeFileSync } from './write-file-sync'\nexport { default as writeJSONFileSync } from './write-json-file-sync'", "import { existsSync, readFileSync as nativeReadFileSync } from 'fs'\nimport { Options } from './options'\n\nexport default function readFileSync(filepath: string, options?: Options): Buffer | string {\n    if (!filepath) return\n    return existsSync(filepath) ? nativeReadFileSync(filepath, options) : undefined\n}", "import { Options } from './options'\nimport readFileSync from './read-file-sync'\n\nexport default function readFileAsNormalizedStrSync(filepath: string, options?: Options): string {\n    const str = readFileSync(filepath, options)\n    return str ? str.toString().replace(/(\\r\\n|\\r|\\n)/g, '\\n') : undefined\n}", "import { Options } from './options'\nimport readFileAsNormalizedStrSync from './read-file-as-normalized-str-sync'\n\nexport default function readJSONFileSync(filepath: string, options?: Options): any {\n    const str = readFileAsNormalizedStrSync(filepath, options)\n    return str ? JSON.parse(str) : undefined\n}\n", "import { existsSync, mkdirSync, writeFileSync as nativeWriteFileSync } from 'fs'\nimport { dirname } from 'path'\nimport { WriteToFileOptions } from './options'\n\nexport default function writeFileSync(filePath: string, data: string | NodeJS.ArrayBufferView, options?: WriteToFileOptions) {\n    if (!filePath) return\n    if (typeof data === 'object') {\n        data = JSON.stringify(data)\n    }\n    if (!existsSync(filePath)) {\n        mkdirSync(dirname(filePath), { recursive: true })\n    }\n    nativeWriteFileSync(filePath, data, options)\n}\n", "import { WriteToFileOptions } from './options'\nimport writeFileSync from './write-file-sync'\n\nexport default function writeJSONFileSync(filePath: string, data: any, options?: WriteToFileOptions) {\n    if (!filePath || !data) return\n    if (typeof data === 'object') {\n        data = JSON.stringify(data)\n    }\n    writeFileSync(filePath, data, options)\n}"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iCAAAE,EAAA,iBAAAC,EAAA,qBAAAC,EAAA,kBAAAC,EAAA,sBAAAC,IAAA,eAAAC,EAAAP,GCAA,IAAAQ,EAA+D,cAGhD,SAARC,EAA8BC,EAAkBC,EAAoC,CACvF,GAAKD,EACL,SAAO,cAAWA,CAAQ,KAAI,EAAAE,cAAmBF,EAAUC,CAAO,EAAI,MAC1E,CCHe,SAARE,EAA6CC,EAAkBC,EAA2B,CAC7F,IAAMC,EAAMC,EAAaH,EAAUC,CAAO,EAC1C,OAAOC,EAAMA,EAAI,SAAS,EAAE,QAAQ,gBAAiB;AAAA,CAAI,EAAI,MACjE,CCHe,SAARE,EAAkCC,EAAkBC,EAAwB,CAC/E,IAAMC,EAAMC,EAA4BH,EAAUC,CAAO,EACzD,OAAOC,EAAM,KAAK,MAAMA,CAAG,EAAI,MACnC,CCNA,IAAAE,EAA4E,cAC5EC,EAAwB,gBAGT,SAARC,EAA+BC,EAAkBC,EAAuCC,EAA8B,CACpHF,IACD,OAAOC,GAAS,WAChBA,EAAO,KAAK,UAAUA,CAAI,MAEzB,cAAWD,CAAQ,MACpB,gBAAU,WAAQA,CAAQ,EAAG,CAAE,UAAW,EAAK,CAAC,KAEpD,EAAAG,eAAoBH,EAAUC,EAAMC,CAAO,EAC/C,CCVe,SAARE,EAAmCC,EAAkBC,EAAWC,EAA8B,CAC7F,CAACF,GAAY,CAACC,IACd,OAAOA,GAAS,WAChBA,EAAO,KAAK,UAAUA,CAAI,GAE9BE,EAAcH,EAAUC,EAAMC,CAAO,EACzC",
  "names": ["src_exports", "__export", "readFileAsNormalizedStrSync", "readFileSync", "readJSONFileSync", "writeFileSync", "writeJSONFileSync", "__toCommonJS", "import_fs", "readFileSync", "filepath", "options", "nativeReadFileSync", "readFileAsNormalizedStrSync", "filepath", "options", "str", "readFileSync", "readJSONFileSync", "filepath", "options", "str", "readFileAsNormalizedStrSync", "import_fs", "import_path", "writeFileSync", "filePath", "data", "options", "nativeWriteFileSync", "writeJSONFileSync", "filePath", "data", "options", "writeFileSync"]
}
