{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["function isSpecificValue(val) {\n    const _Buffer = typeof Buffer !== 'undefined' ? Buffer : null\n    return (\n        _Buffer && val instanceof _Buffer\n        || val instanceof Date\n        || val instanceof RegExp\n    ) ? true : false\n}\n\nfunction cloneSpecificValue(val) {\n    const _Buffer = typeof Buffer !== 'undefined' ? Buffer : null\n    if (_Buffer && val instanceof Buffer) {\n        const x = Buffer.alloc(val.length)\n        val.copy(x)\n        return x\n    } else if (val instanceof Date) {\n        return new Date(val.getTime())\n    } else if (val instanceof RegExp) {\n        return new RegExp(val)\n    } else {\n        throw new Error('Unexpected situation')\n    }\n}\n\n/**\n * Recursive cloning array.\n */\nfunction deepCloneArray(arr) {\n    const clone = []\n    arr.forEach(function (item, index) {\n        if (typeof item === 'object' && item !== null) {\n            if (Array.isArray(item)) {\n                clone[index] = deepCloneArray(item)\n            } else if (isSpecificValue(item)) {\n                clone[index] = cloneSpecificValue(item)\n            } else {\n                clone[index] = extend({}, item)\n            }\n        } else {\n            clone[index] = item\n        }\n    })\n    return clone\n}\n\nfunction safeGetProperty(object, property) {\n    return property === '__proto__' ? undefined : object[property]\n}\n\n/**\n * Extening object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   extend({}, yourObj_1, [yourObj_N]);\n */\nexport default function extend(...sources: any[]) {\n    const target = {}\n\n    let val: any, src: any\n\n    sources.forEach(function (obj) {\n        // skip argument if isn't an object, is null, or is an array\n        if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) {\n            return\n        }\n\n        Object.keys(obj).forEach(function (key) {\n            src = safeGetProperty(target, key) // source value\n            val = safeGetProperty(obj, key) // new value\n\n            // recursion prevention\n            if (val === target) {\n                return\n\n                /**\n                 * if new value isn't object then just overwrite by new value\n                 * instead of extending.\n                 */\n            } else if (typeof val !== 'object' || val === null) {\n                target[key] = val\n                return\n\n                // just clone arrays (and recursive clone objects inside)\n            } else if (Array.isArray(val)) {\n                target[key] = deepCloneArray(val)\n                return\n\n                // custom cloning and overwrite for specific objects\n            } else if (isSpecificValue(val)) {\n                target[key] = cloneSpecificValue(val)\n                return\n\n                // overwrite by new value if source isn't object or array\n            } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n                target[key] = extend({}, val)\n                return\n\n                // source value and new value is objects both, extending...\n            } else {\n                target[key] = extend(src, val)\n                return\n            }\n        })\n    })\n\n    return target\n}\n\nexport { extend }"],
  "mappings": "AAAA,SAASA,EAAgBC,EAAK,CAC1B,IAAMC,EAAU,OAAO,OAAW,IAAc,OAAS,KACzD,MACI,GAAAA,GAAWD,aAAeC,GACvBD,aAAe,MACfA,aAAe,OAE1B,CAEA,SAASE,EAAmBF,EAAK,CAE7B,IADgB,OAAO,OAAW,IAAc,OAAS,OAC1CA,aAAe,OAAQ,CAClC,IAAMG,EAAI,OAAO,MAAMH,EAAI,MAAM,EACjC,OAAAA,EAAI,KAAKG,CAAC,EACHA,CACX,KAAO,IAAIH,aAAe,KACtB,OAAO,IAAI,KAAKA,EAAI,QAAQ,CAAC,EAC1B,GAAIA,aAAe,OACtB,OAAO,IAAI,OAAOA,CAAG,EAErB,MAAM,IAAI,MAAM,sBAAsB,EAE9C,CAKA,SAASI,EAAeC,EAAK,CACzB,IAAMC,EAAQ,CAAC,EACf,OAAAD,EAAI,QAAQ,SAAUE,EAAMC,EAAO,CAC3B,OAAOD,GAAS,UAAYA,IAAS,KACjC,MAAM,QAAQA,CAAI,EAClBD,EAAME,CAAK,EAAIJ,EAAeG,CAAI,EAC3BR,EAAgBQ,CAAI,EAC3BD,EAAME,CAAK,EAAIN,EAAmBK,CAAI,EAEtCD,EAAME,CAAK,EAAIC,EAAO,CAAC,EAAGF,CAAI,EAGlCD,EAAME,CAAK,EAAID,CAEvB,CAAC,EACMD,CACX,CAEA,SAASI,EAAgBC,EAAQC,EAAU,CACvC,OAAOA,IAAa,YAAc,OAAYD,EAAOC,CAAQ,CACjE,CAWe,SAARH,KAA2BI,EAAgB,CAC9C,IAAMC,EAAS,CAAC,EAEZd,EAAUe,EAEd,OAAAF,EAAQ,QAAQ,SAAUG,EAAK,CAEvB,OAAOA,GAAQ,UAAYA,IAAQ,MAAQ,MAAM,QAAQA,CAAG,GAIhE,OAAO,KAAKA,CAAG,EAAE,QAAQ,SAAUC,EAAK,CAKpC,GAJAF,EAAML,EAAgBI,EAAQG,CAAG,EACjCjB,EAAMU,EAAgBM,EAAKC,CAAG,EAG1BjB,IAAQc,EAOL,GAAI,OAAOd,GAAQ,UAAYA,IAAQ,KAAM,CAChDc,EAAOG,CAAG,EAAIjB,EACd,MAGJ,SAAW,MAAM,QAAQA,CAAG,EAAG,CAC3Bc,EAAOG,CAAG,EAAIb,EAAeJ,CAAG,EAChC,MAGJ,SAAWD,EAAgBC,CAAG,EAAG,CAC7Bc,EAAOG,CAAG,EAAIf,EAAmBF,CAAG,EACpC,MAGJ,SAAW,OAAOe,GAAQ,UAAYA,IAAQ,MAAQ,MAAM,QAAQA,CAAG,EAAG,CACtED,EAAOG,CAAG,EAAIR,EAAO,CAAC,EAAGT,CAAG,EAC5B,MAGJ,KAAO,CACHc,EAAOG,CAAG,EAAIR,EAAOM,EAAKf,CAAG,EAC7B,MACJ,CACJ,CAAC,CACL,CAAC,EAEMc,CACX",
  "names": ["isSpecificValue", "val", "_Buffer", "cloneSpecificValue", "x", "deepCloneArray", "arr", "clone", "item", "index", "extend", "safeGetProperty", "object", "property", "sources", "target", "src", "obj", "key"]
}
