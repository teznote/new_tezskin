/// <reference types="node" />
/// <reference types="node" />
import { Options } from './options';
import MasterCSS from '@master/css';
import type { Config } from '@master/css';
import fs from 'fs';
import chokidar from 'chokidar';
import { EventEmitter } from 'node:events';
export default class CSSExtractor extends EventEmitter {
    customOptions: Options | string | string[];
    cwd: string;
    css: MasterCSS;
    latentClasses: Set<string>;
    validClasses: Set<string>;
    invalidClasses: Set<string>;
    options: Options;
    watching: boolean;
    watchers: chokidar.FSWatcher[];
    constructor(customOptions?: Options | string | string[], cwd?: string);
    init(customOptions?: string | Options | string[]): this;
    reset(customOptions?: string | Options | string[]): Promise<this>;
    destroy(): Promise<this>;
    prepare(): Promise<void>;
    /**
     * @description Filter based on relative file paths and extract content
     * @param source
     * @param content
     * @returns string[] Latent classes
     */
    extract(source: string, content: string): string[];
    /**
     * @description Filter based on relative file paths, extract content, and insert
     * @param source
     * @param content
     * @returns string[] Latent classes
     */
    insert(source: string, content: string): Promise<boolean>;
    insertFile(source: string): Promise<boolean>;
    insertFiles(sources: string[]): Promise<boolean[]>;
    export(filename?: string): void;
    watchSource(paths: string | readonly string[], watchOptions?: chokidar.WatchOptions): void;
    watch(events: string, paths: string | readonly string[], handle: (path: string, stats?: fs.Stats) => void, watchOptions?: chokidar.WatchOptions): void;
    private initWatch;
    private disableWatch;
    startWatch(): Promise<void>;
    closeWatch(): Promise<void>;
    /**
     * computed from `options.sources`
     */
    get fixedSourcePaths(): string[];
    /**
     * resolved from `fixedSourcePaths`
     */
    get resolvedFixedSourcePaths(): string[];
    /**
     * `options.include` - `options.exclude`
     */
    get allowedSourcePaths(): string[];
    /**
     * resolved from `allowedSourcePaths`
     */
    get resolvedAllowedSourcePaths(): string[];
    isSourceAllowed(source: string): boolean;
    /**
     * computed from `options.config`
     */
    get config(): Config;
    /**
     * computed from string `options.config`
    */
    get configPath(): string;
    /**
     * computed from string `options.config`
    */
    get resolvedConfigPath(): string;
    /**
     * computed from string `customOptions`
    */
    get optionsPath(): string;
    /**
     * computed from string `customOptions`
    */
    get resolvedOptionsPath(): string;
    get resolvedVirtualModuleId(): string;
    get slotCSSRule(): string;
}
