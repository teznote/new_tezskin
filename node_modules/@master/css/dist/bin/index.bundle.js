#!/usr/bin/env node
var y=Object.create;var d=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var E=(e,s,t,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of _(s))!x.call(e,o)&&o!==t&&d(e,o,{get:()=>s[o],enumerable:!(i=C(s,o))||i.enumerable});return e};var p=(e,s,t)=>(t=e!=null?y(v(e)):{},E(s||!e||!e.__esModule?d(t,"default",{value:e,enumerable:!0}):t,e));var T=require("commander"),m=p(require("path")),c=p(require("fs"));var S=`/** @type {import('@master/css').Config} */
export default {
    classes: {},
    colors: {},
    themes: {},
    rules: {},
    values: {},
    semantics: {},
    viewports: {},
    mediaQueries: {},
    animations: {},
    selectors: {},
    functions: {}
}
`;var g=`/** @type {import('@master/css').Config} */
module.exports = {
    classes: {},
    colors: {},
    themes: {},
    rules: {},
    values: {},
    semantics: {},
    viewports: {},
    mediaQueries: {},
    animations: {},
    selectors: {},
    functions: {}
}
`;var h=`import type { Config } from '@master/css'

export default {
    classes: {},
    colors: {},
    themes: {},
    rules: {},
    values: {},
    semantics: {},
    viewports: {},
    mediaQueries: {},
    animations: {},
    selectors: {},
    functions: {}
} as Config
`;var n=p(require("@techor/log")),l=require("@techor/fs"),{version:O,name:w,description:j}=(0,l.readJSONFileSync)(m.default.resolve(__dirname,"../../package.json")),a=new T.Command;a.name(w).description(j).version(O||"0.0.0");a.command("init").description("Initialize definition files for Master CSS").option("-o, --override","Override existing definition file").option("--esm","ES Module .mjs").option("--ts","TypeScript .ts").option("--cjs","CommonJS .js").action(async function(e){let{esm:s,ts:t,cjs:i}=e;if(!s&&!t&&!i)if(c.default.existsSync("tsconfig.json"))t=!0;else{let{type:r}=(0,l.readJSONFileSync)("./package.json")||{};r==="module"?s=!0:i=!0}let o=(r,f)=>{let u=c.default.existsSync(m.default.join(process.cwd(),r));u?u&&e.override?(c.default.writeFileSync(r,f),n.default.ok`**${r}** file is overridden`):n.default.x`**${r}** file already exists`:(c.default.writeFileSync(r,f),n.default.ok`**${r}** file is created`)};s&&o("master.css.mjs",S),t&&o("master.css.ts",h),i&&o("master.css.js",g)});a.command("render").description("Scans HTML and injects generated CSS rules").argument("<source paths>","The path in glob patterns of the source of the HTML file").option("-c --config <path>","The source path of the Master CSS configuration","master.css.*").option("-a --analyze","Analyze injected CSS and HTML size ( brotli ) without writing to file").action(async function(e,s){try{await require("@master/css-renderer/actions/main")(e,s)}catch(t){t.code==="ERR_MODULE_NOT_FOUND"?n.default.i`Please run **npm** **install** **@master/css-renderer** first`:console.error(t)}});a.command("extract").argument("[source paths]","The glob pattern path to extract sources").option("-w, --watch","Watch file changed and generate CSS rules.").option("-o, --output <path>","Specify your CSS file output path").option("-v, --verbose","Verbose logging 0~N","1").option("--options <path>","Specify your extractor options sources","master.css-extractor.*").action(async function(e,s){try{await require("@master/css-extractor/actions/main")(e,s)}catch(t){t.code==="ERR_MODULE_NOT_FOUND"?n.default.i`Please run **npm** **install** **@master/css-extractor** first`:console.error(t)}});a.parse();
