import { Rule, RuleMeta, RuleNative } from './rule';
import type { Config, Animations } from './config';
export interface MasterCSS {
    readonly style: HTMLStyleElement;
    readonly host: Element;
    readonly root: Document | ShadowRoot;
    semantics: [RegExp, [string, string | Record<string, string>]][];
    classes: Record<string, string[]>;
    colorThemesMap: Record<string, Record<string, string>>;
    colorNames: string[];
    themeNames: string[];
    classesBy: Record<string, string[]>;
    selectors: Record<string, [RegExp, string[]][]>;
    values: Record<string, Record<string, string | number>>;
    globalValues: Record<string, string | number>;
    viewports: Record<string, number>;
    mediaQueries: Record<string, string>;
    matches: Record<string, RegExp>;
    keyframesMap: Record<string, {
        native: RuleNative;
        count: number;
    }>;
    animations: Animations;
}
export declare class MasterCSS {
    config: Config;
    static root: MasterCSS;
    static config: Config;
    static instances: MasterCSS[];
    static refresh: (config: Config) => void;
    readonly rules: Rule[];
    readonly ruleBy: Record<string, Rule>;
    readonly countBy: {};
    readonly observing = false;
    observer: MutationObserver;
    private colorByThemeByColorName;
    constructor(config?: Config);
    cache(): void;
    /**
     * Observe the DOM for changes and update the running stylesheet. (browser only)
     * @param targetRoot root element to observe. default: document
     * @param options mutation observer options
     * @returns this
     */
    observe(targetRoot: Document | ShadowRoot | null, options?: MutationObserverInit): this;
    disconnect(): void;
    /**
     * Match check if Master CSS class syntax
     * @param syntax class syntax
     * @returns css text
     */
    match(syntax: string): RuleMeta;
    /**
     * Create rules from class syntax
     * @param syntax class syntax
     * @returns Rule[]
     */
    create(syntax: string): Rule[];
    /**
     * 根據蒐集到的所有 DOM class 重新 create
     */
    refresh(config: Config): void;
    destroy(): void;
    /**
     * 透過類名來刪除對應的 rules
     */
    delete(className: string): void;
    /**
    * 依類名插入規則
     */
    insert(syntax: string): boolean;
    /**
    * 加工插入規則
    * 1. where
    * 2. normal
    * 3. where selectors
    * 4. normal selectors
    * 5. media where
    * 6. media normal
    * 7. media where selectors
    * 8. media selectors
    * 9. media width where
    * 10. media width
    * 11. media width where selectors
    * 12. media width selectors
    */
    insertRules(rules: Rule[]): void;
    get text(): string;
    private getExtendedConfig;
    private handleRuleWithAnimationNames;
}
declare global {
    interface Window {
        MasterCSS: typeof MasterCSS;
    }
}
